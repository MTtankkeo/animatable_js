class s{constructor(s){this.callback=s,this.isDisposed=!1,this.id=requestAnimationFrame(this.handle=this.handle.bind(this))}handle(s){var e;if(this.isDisposed)return;const t=s-(null!==(e=this.previousElapsed)&&void 0!==e?e:s);this.previousElapsed=s,this.callback(t),this.id=requestAnimationFrame(this.handle)}dispose(){this.isDisposed=!0,cancelAnimationFrame(this.id)}}var e;!function(s){s[s.NONE=0]="NONE",s[s.FORWARD=1]="FORWARD",s[s.FORWARDED=2]="FORWARDED",s[s.BACKWARD=3]="BACKWARD",s[s.BACKWARDED=4]="BACKWARDED"}(e||(e={}));class t{}class i extends t{set value(s){this._value!=s&&(this._value=s)}constructor(s,t){super(),this.listeners=[],this.statusListeners=[],this.status=e.NONE,this.value=s,this.duration=t}addListener(s){console.assert(!this.listeners.includes(s),"Already a given listener does exist."),this.listeners.push(s)}removeListener(s){console.assert(this.listeners.includes(s),"Already a given listener does not exist."),this.listeners=this.listeners.filter((e=>e!=s))}addStatusListener(s){console.assert(!this.statusListeners.includes(s),"Already a given status listener does exist."),this.statusListeners.push(s)}removeStatusListener(s){console.assert(this.statusListeners.includes(s),"Already a given status listener does not exist."),this.statusListeners=this.statusListeners.filter((e=>e!=s))}notifyListeners(s){this.listeners.forEach((e=>e(s)))}notifyStatusListeners(s){this.statusListeners.forEach((e=>e(s)))}animateTo(s,e){this.animate(this.value,s,e)}animate(e,t,i){var a;e!=t&&(null===(a=this.activeTicker)||void 0===a||a.dispose(),this.activeTicker=new s((s=>{console.log(s)})))}dispose(){this.activeTicker.dispose()}}export{t as Animatable,i as Animation,e as AnimationStatus,s as Ticker};
//# sourceMappingURL=index.js.map
